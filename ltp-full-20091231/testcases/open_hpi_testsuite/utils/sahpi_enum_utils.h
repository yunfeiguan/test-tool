/*      -*- linux-c -*-
 *
 * (C) Copyright IBM Corp. 2004
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  This
 * file and program are licensed under a BSD style license.  See
 * the Copying file included with the OpenHPI distribution for
 * full licensing terms.
 *
 * Author(s):
 *      Steve Sherman <stevees@us.ibm.com> 
 */

/******************************************************************* 
 * WARNING! This file is auto-magically generated by:
 *          ./SaHpi2code.pl. 
 *          Do not change this file manually. Update script instead
 *******************************************************************/

#ifndef __SAHPI_ENUM_UTILS_H
#define __SAHPI_ENUM_UTILS_H

#ifndef __OH_UTILS_H
#warning *** Include oh_utils.h instead of individual utility header files ***
#endif

#ifdef __cplusplus
extern "C" {
#endif 

#define OH_MAX_LANGUAGE 137 
extern struct oh_language_map {
  SaHpiLanguageT  entity_type;
  char *str;
} language_strings[OH_MAX_LANGUAGE];

char * oh_lookup_language(SaHpiLanguageT value);
SaErrorT oh_encode_language(SaHpiTextBufferT *buffer, SaHpiLanguageT *type);

#define OH_MAX_TEXTTYPE 5 
extern struct oh_texttype_map {
  SaHpiTextTypeT  entity_type;
  char *str;
} texttype_strings[OH_MAX_TEXTTYPE];

char * oh_lookup_texttype(SaHpiTextTypeT value);
SaErrorT oh_encode_texttype(SaHpiTextBufferT *buffer, SaHpiTextTypeT *type);

#define OH_MAX_ENTITYTYPE 67 
extern struct oh_entitytype_map {
  SaHpiEntityTypeT  entity_type;
  char *str;
} entitytype_strings[OH_MAX_ENTITYTYPE];

char * oh_lookup_entitytype(SaHpiEntityTypeT value);
SaErrorT oh_encode_entitytype(SaHpiTextBufferT *buffer, SaHpiEntityTypeT *type);

#define OH_MAX_SENSORTYPE 47 
extern struct oh_sensortype_map {
  SaHpiSensorTypeT  entity_type;
  char *str;
} sensortype_strings[OH_MAX_SENSORTYPE];

char * oh_lookup_sensortype(SaHpiSensorTypeT value);
SaErrorT oh_encode_sensortype(SaHpiTextBufferT *buffer, SaHpiSensorTypeT *type);

#define OH_MAX_SENSORREADINGTYPE 4 
extern struct oh_sensorreadingtype_map {
  SaHpiSensorReadingTypeT  entity_type;
  char *str;
} sensorreadingtype_strings[OH_MAX_SENSORREADINGTYPE];

char * oh_lookup_sensorreadingtype(SaHpiSensorReadingTypeT value);
SaErrorT oh_encode_sensorreadingtype(SaHpiTextBufferT *buffer, SaHpiSensorReadingTypeT *type);

#define OH_MAX_SENSOREVENTMASKACTION 2 
extern struct oh_sensoreventmaskaction_map {
  SaHpiSensorEventMaskActionT  entity_type;
  char *str;
} sensoreventmaskaction_strings[OH_MAX_SENSOREVENTMASKACTION];

char * oh_lookup_sensoreventmaskaction(SaHpiSensorEventMaskActionT value);
SaErrorT oh_encode_sensoreventmaskaction(SaHpiTextBufferT *buffer, SaHpiSensorEventMaskActionT *type);

#define OH_MAX_SENSORUNITS 91 
extern struct oh_sensorunits_map {
  SaHpiSensorUnitsT  entity_type;
  char *str;
} sensorunits_strings[OH_MAX_SENSORUNITS];

char * oh_lookup_sensorunits(SaHpiSensorUnitsT value);
SaErrorT oh_encode_sensorunits(SaHpiTextBufferT *buffer, SaHpiSensorUnitsT *type);

#define OH_MAX_SENSORMODUNITUSE 3 
extern struct oh_sensormodunituse_map {
  SaHpiSensorModUnitUseT  entity_type;
  char *str;
} sensormodunituse_strings[OH_MAX_SENSORMODUNITUSE];

char * oh_lookup_sensormodunituse(SaHpiSensorModUnitUseT value);
SaErrorT oh_encode_sensormodunituse(SaHpiTextBufferT *buffer, SaHpiSensorModUnitUseT *type);

#define OH_MAX_SENSOREVENTCTRL 3 
extern struct oh_sensoreventctrl_map {
  SaHpiSensorEventCtrlT  entity_type;
  char *str;
} sensoreventctrl_strings[OH_MAX_SENSOREVENTCTRL];

char * oh_lookup_sensoreventctrl(SaHpiSensorEventCtrlT value);
SaErrorT oh_encode_sensoreventctrl(SaHpiTextBufferT *buffer, SaHpiSensorEventCtrlT *type);

#define OH_MAX_CTRLTYPE 6 
extern struct oh_ctrltype_map {
  SaHpiCtrlTypeT  entity_type;
  char *str;
} ctrltype_strings[OH_MAX_CTRLTYPE];

char * oh_lookup_ctrltype(SaHpiCtrlTypeT value);
SaErrorT oh_encode_ctrltype(SaHpiTextBufferT *buffer, SaHpiCtrlTypeT *type);

#define OH_MAX_CTRLSTATEDIGITAL 4 
extern struct oh_ctrlstatedigital_map {
  SaHpiCtrlStateDigitalT  entity_type;
  char *str;
} ctrlstatedigital_strings[OH_MAX_CTRLSTATEDIGITAL];

char * oh_lookup_ctrlstatedigital(SaHpiCtrlStateDigitalT value);
SaErrorT oh_encode_ctrlstatedigital(SaHpiTextBufferT *buffer, SaHpiCtrlStateDigitalT *type);

#define OH_MAX_CTRLMODE 2 
extern struct oh_ctrlmode_map {
  SaHpiCtrlModeT  entity_type;
  char *str;
} ctrlmode_strings[OH_MAX_CTRLMODE];

char * oh_lookup_ctrlmode(SaHpiCtrlModeT value);
SaErrorT oh_encode_ctrlmode(SaHpiTextBufferT *buffer, SaHpiCtrlModeT *type);

#define OH_MAX_CTRLOUTPUTTYPE 11 
extern struct oh_ctrloutputtype_map {
  SaHpiCtrlOutputTypeT  entity_type;
  char *str;
} ctrloutputtype_strings[OH_MAX_CTRLOUTPUTTYPE];

char * oh_lookup_ctrloutputtype(SaHpiCtrlOutputTypeT value);
SaErrorT oh_encode_ctrloutputtype(SaHpiTextBufferT *buffer, SaHpiCtrlOutputTypeT *type);

#define OH_MAX_IDRAREATYPE 6 
extern struct oh_idrareatype_map {
  SaHpiIdrAreaTypeT  entity_type;
  char *str;
} idrareatype_strings[OH_MAX_IDRAREATYPE];

char * oh_lookup_idrareatype(SaHpiIdrAreaTypeT value);
SaErrorT oh_encode_idrareatype(SaHpiTextBufferT *buffer, SaHpiIdrAreaTypeT *type);

#define OH_MAX_IDRFIELDTYPE 11 
extern struct oh_idrfieldtype_map {
  SaHpiIdrFieldTypeT  entity_type;
  char *str;
} idrfieldtype_strings[OH_MAX_IDRFIELDTYPE];

char * oh_lookup_idrfieldtype(SaHpiIdrFieldTypeT value);
SaErrorT oh_encode_idrfieldtype(SaHpiTextBufferT *buffer, SaHpiIdrFieldTypeT *type);

#define OH_MAX_WATCHDOGACTION 4 
extern struct oh_watchdogaction_map {
  SaHpiWatchdogActionT  entity_type;
  char *str;
} watchdogaction_strings[OH_MAX_WATCHDOGACTION];

char * oh_lookup_watchdogaction(SaHpiWatchdogActionT value);
SaErrorT oh_encode_watchdogaction(SaHpiTextBufferT *buffer, SaHpiWatchdogActionT *type);

#define OH_MAX_WATCHDOGACTIONEVENT 5 
extern struct oh_watchdogactionevent_map {
  SaHpiWatchdogActionEventT  entity_type;
  char *str;
} watchdogactionevent_strings[OH_MAX_WATCHDOGACTIONEVENT];

char * oh_lookup_watchdogactionevent(SaHpiWatchdogActionEventT value);
SaErrorT oh_encode_watchdogactionevent(SaHpiTextBufferT *buffer, SaHpiWatchdogActionEventT *type);

#define OH_MAX_WATCHDOGPRETIMERINTERRUPT 5 
extern struct oh_watchdogpretimerinterrupt_map {
  SaHpiWatchdogPretimerInterruptT  entity_type;
  char *str;
} watchdogpretimerinterrupt_strings[OH_MAX_WATCHDOGPRETIMERINTERRUPT];

char * oh_lookup_watchdogpretimerinterrupt(SaHpiWatchdogPretimerInterruptT value);
SaErrorT oh_encode_watchdogpretimerinterrupt(SaHpiTextBufferT *buffer, SaHpiWatchdogPretimerInterruptT *type);

#define OH_MAX_WATCHDOGTIMERUSE 7 
extern struct oh_watchdogtimeruse_map {
  SaHpiWatchdogTimerUseT  entity_type;
  char *str;
} watchdogtimeruse_strings[OH_MAX_WATCHDOGTIMERUSE];

char * oh_lookup_watchdogtimeruse(SaHpiWatchdogTimerUseT value);
SaErrorT oh_encode_watchdogtimeruse(SaHpiTextBufferT *buffer, SaHpiWatchdogTimerUseT *type);

#define OH_MAX_HSINDICATORSTATE 2 
extern struct oh_hsindicatorstate_map {
  SaHpiHsIndicatorStateT  entity_type;
  char *str;
} hsindicatorstate_strings[OH_MAX_HSINDICATORSTATE];

char * oh_lookup_hsindicatorstate(SaHpiHsIndicatorStateT value);
SaErrorT oh_encode_hsindicatorstate(SaHpiTextBufferT *buffer, SaHpiHsIndicatorStateT *type);

#define OH_MAX_HSACTION 2 
extern struct oh_hsaction_map {
  SaHpiHsActionT  entity_type;
  char *str;
} hsaction_strings[OH_MAX_HSACTION];

char * oh_lookup_hsaction(SaHpiHsActionT value);
SaErrorT oh_encode_hsaction(SaHpiTextBufferT *buffer, SaHpiHsActionT *type);

#define OH_MAX_HSSTATE 5 
extern struct oh_hsstate_map {
  SaHpiHsStateT  entity_type;
  char *str;
} hsstate_strings[OH_MAX_HSSTATE];

char * oh_lookup_hsstate(SaHpiHsStateT value);
SaErrorT oh_encode_hsstate(SaHpiTextBufferT *buffer, SaHpiHsStateT *type);

#define OH_MAX_SEVERITY 7 
extern struct oh_severity_map {
  SaHpiSeverityT  entity_type;
  char *str;
} severity_strings[OH_MAX_SEVERITY];

char * oh_lookup_severity(SaHpiSeverityT value);
SaErrorT oh_encode_severity(SaHpiTextBufferT *buffer, SaHpiSeverityT *type);

#define OH_MAX_RESOURCEEVENTTYPE 6 
extern struct oh_resourceeventtype_map {
  SaHpiResourceEventTypeT  entity_type;
  char *str;
} resourceeventtype_strings[OH_MAX_RESOURCEEVENTTYPE];

char * oh_lookup_resourceeventtype(SaHpiResourceEventTypeT value);
SaErrorT oh_encode_resourceeventtype(SaHpiTextBufferT *buffer, SaHpiResourceEventTypeT *type);

#define OH_MAX_DOMAINEVENTTYPE 2 
extern struct oh_domaineventtype_map {
  SaHpiDomainEventTypeT  entity_type;
  char *str;
} domaineventtype_strings[OH_MAX_DOMAINEVENTTYPE];

char * oh_lookup_domaineventtype(SaHpiDomainEventTypeT value);
SaErrorT oh_encode_domaineventtype(SaHpiTextBufferT *buffer, SaHpiDomainEventTypeT *type);

#define OH_MAX_SWEVENTTYPE 3 
extern struct oh_sweventtype_map {
  SaHpiSwEventTypeT  entity_type;
  char *str;
} sweventtype_strings[OH_MAX_SWEVENTTYPE];

char * oh_lookup_sweventtype(SaHpiSwEventTypeT value);
SaErrorT oh_encode_sweventtype(SaHpiTextBufferT *buffer, SaHpiSwEventTypeT *type);

#define OH_MAX_EVENTTYPE 12 
extern struct oh_eventtype_map {
  SaHpiEventTypeT  entity_type;
  char *str;
} eventtype_strings[OH_MAX_EVENTTYPE];

char * oh_lookup_eventtype(SaHpiEventTypeT value);
SaErrorT oh_encode_eventtype(SaHpiTextBufferT *buffer, SaHpiEventTypeT *type);

#define OH_MAX_STATUSCONDTYPE 4 
extern struct oh_statuscondtype_map {
  SaHpiStatusCondTypeT  entity_type;
  char *str;
} statuscondtype_strings[OH_MAX_STATUSCONDTYPE];

char * oh_lookup_statuscondtype(SaHpiStatusCondTypeT value);
SaErrorT oh_encode_statuscondtype(SaHpiTextBufferT *buffer, SaHpiStatusCondTypeT *type);

#define OH_MAX_ANNUNCIATORMODE 3 
extern struct oh_annunciatormode_map {
  SaHpiAnnunciatorModeT  entity_type;
  char *str;
} annunciatormode_strings[OH_MAX_ANNUNCIATORMODE];

char * oh_lookup_annunciatormode(SaHpiAnnunciatorModeT value);
SaErrorT oh_encode_annunciatormode(SaHpiTextBufferT *buffer, SaHpiAnnunciatorModeT *type);

#define OH_MAX_ANNUNCIATORTYPE 7 
extern struct oh_annunciatortype_map {
  SaHpiAnnunciatorTypeT  entity_type;
  char *str;
} annunciatortype_strings[OH_MAX_ANNUNCIATORTYPE];

char * oh_lookup_annunciatortype(SaHpiAnnunciatorTypeT value);
SaErrorT oh_encode_annunciatortype(SaHpiTextBufferT *buffer, SaHpiAnnunciatorTypeT *type);

#define OH_MAX_DIMITESTSERVICEIMPACT 3
extern struct oh_dimitestserviceimpact_map {
  SaHpiDimiTestServiceImpactT entity_type;
  char *str;
} dimitestserviceimpact_strings[OH_MAX_DIMITESTSERVICEIMPACT];

char* oh_lookup_dimitestserviceimpact(SaHpiDimiTestServiceImpactT value);
SaErrorT oh_encode_dimitestserviceimpact(SaHpiTextBufferT *buffer, SaHpiDimiTestServiceImpactT *type);

#define OH_MAX_DIMITESTRUNSTATUS 5 
extern struct oh_dimitestrunstatus_map {
  SaHpiDimiTestRunStatusT  entity_type;
  char *str;
} dimitestrunstatus_strings[OH_MAX_DIMITESTRUNSTATUS];

char * oh_lookup_dimitestrunstatus(SaHpiDimiTestRunStatusT value);
SaErrorT oh_encode_dimitestrunstatus(SaHpiTextBufferT *buffer, SaHpiDimiTestRunStatusT *type);

#define OH_MAX_FUMISOURCESTATUS 9 
extern struct oh_fumisourcestatus_map {
  SaHpiFumiSourceStatusT  entity_type;
  char *str;
} fumisourcestatus_strings[OH_MAX_FUMISOURCESTATUS];

char * oh_lookup_fumisourcestatus(SaHpiFumiSourceStatusT value);
SaErrorT oh_encode_fumisourcestatus(SaHpiTextBufferT *buffer, SaHpiFumiSourceStatusT *type);

#define OH_MAX_FUMIBANKSTATE 6 
extern struct oh_fumibankstate_map {
  SaHpiFumiBankStateT entity_type;
  char *str;
} fumibankstate_strings[OH_MAX_FUMIBANKSTATE];

char * oh_lookup_fumibankstate(SaHpiFumiBankStateT value);
SaErrorT oh_encode_fumibankstate(SaHpiTextBufferT *buffer, SaHpiFumiBankStateT *type);

#define OH_MAX_FUMIUPGRADESTATUS 27 
extern struct oh_fumiupgradestatus_map {
  SaHpiFumiUpgradeStatusT  entity_type;
  char *str;
} fumiupgradestatus_strings[OH_MAX_FUMIUPGRADESTATUS];

char * oh_lookup_fumiupgradestatus(SaHpiFumiUpgradeStatusT value);
SaErrorT oh_encode_fumiupgradestatus(SaHpiTextBufferT *buffer, SaHpiFumiUpgradeStatusT *type);

#define OH_MAX_RDRTYPE 8 
extern struct oh_rdrtype_map {
  SaHpiRdrTypeT  entity_type;
  char *str;
} rdrtype_strings[OH_MAX_RDRTYPE];

char * oh_lookup_rdrtype(SaHpiRdrTypeT value);
SaErrorT oh_encode_rdrtype(SaHpiTextBufferT *buffer, SaHpiRdrTypeT *type);

#define OH_MAX_PARMACTION 3 
extern struct oh_parmaction_map {
  SaHpiParmActionT  entity_type;
  char *str;
} parmaction_strings[OH_MAX_PARMACTION];

char * oh_lookup_parmaction(SaHpiParmActionT value);
SaErrorT oh_encode_parmaction(SaHpiTextBufferT *buffer, SaHpiParmActionT *type);

#define OH_MAX_RESETACTION 4 
extern struct oh_resetaction_map {
  SaHpiResetActionT  entity_type;
  char *str;
} resetaction_strings[OH_MAX_RESETACTION];

char * oh_lookup_resetaction(SaHpiResetActionT value);
SaErrorT oh_encode_resetaction(SaHpiTextBufferT *buffer, SaHpiResetActionT *type);

#define OH_MAX_POWERSTATE 3 
extern struct oh_powerstate_map {
  SaHpiPowerStateT  entity_type;
  char *str;
} powerstate_strings[OH_MAX_POWERSTATE];

char * oh_lookup_powerstate(SaHpiPowerStateT value);
SaErrorT oh_encode_powerstate(SaHpiTextBufferT *buffer, SaHpiPowerStateT *type);

#define OH_MAX_EVENTLOGOVERFLOWACTION 2 
extern struct oh_eventlogoverflowaction_map {
  SaHpiEventLogOverflowActionT  entity_type;
  char *str;
} eventlogoverflowaction_strings[OH_MAX_EVENTLOGOVERFLOWACTION];

char * oh_lookup_eventlogoverflowaction(SaHpiEventLogOverflowActionT value);
SaErrorT oh_encode_eventlogoverflowaction(SaHpiTextBufferT *buffer, SaHpiEventLogOverflowActionT *type);

#define OH_MAX_ERROR 22 
extern struct oh_error_map {
  SaErrorT  entity_type;
  char *str;
} error_strings[OH_MAX_ERROR];

char * oh_lookup_error(SaErrorT value);
SaErrorT oh_encode_error(SaHpiTextBufferT *buffer, SaErrorT *type);

#define OH_MAX_EVENTCATEGORY 14 
extern struct oh_eventcategory_map {
  SaHpiEventCategoryT  entity_type;
  char *str;
} eventcategory_strings[OH_MAX_EVENTCATEGORY];

char * oh_lookup_eventcategory(SaHpiEventCategoryT value);
SaErrorT oh_encode_eventcategory(SaHpiTextBufferT *buffer, SaHpiEventCategoryT *type);


#ifdef __cplusplus
}
#endif

#endif
