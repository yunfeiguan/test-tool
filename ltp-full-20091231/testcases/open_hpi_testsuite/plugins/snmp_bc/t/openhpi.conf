#File format is outlined here and examples are given

###First section, declare global parameters
#example:
#global {
#        OPENHPI_LOG_SEV = "MAJOR"
#        OPENHPI_ON_EP = "{SYSTEM_CHASSIS,1}"
#}
#Parameters in the global stanza will be converted to
#environment variables.
#OPENHPI_LOG_SEV sets which events will be logged in the domain
#system event log based on severity: CRITICAL, MAJOR, MINOR,
#INFORMATIONAL, OK, and DEBUG.
#OPENHPI_ON_EP sets the entity path on wich the application is running.

###Second section, declare plugin to use:
#example:

#plugin	plugin-name

#plugin	libdummy

#Depends on openipmi to be installed on this system:
#plugin libipmi

#Depends on net-snmp being installed on the system:
plugin libsnmp_bc

#Depends openhpi being configured 
#"configure --enable-dummy=static":
#plugin dummy

#plugin libipmidirect

#############################################################################
##**WARNING** System administrators have to make sure that entity paths are
## unique in a domain. If entity paths are conflicting among handlers, make
## sure the "entity_root" is unique here across handlers.
#############################################################################
###Third section is a handler (instance) declaration with arguments understood by plugin
#Strings are enclosed by "", numbers are not.

#handler	libdummy {
#        entity_root = "{SYSTEM_CHASSIS,1}"
#        name = "test"
#	addr =	0
#}

# Dummy allows you open second virtual by addr 1
#handler	libdummy {
#	addr =	1
#}

#section for ipmi plugin using SMI -- local interface

#handler libipmi	{
#       entity_root = "{SYSTEM_CHASSIS,2}"
#	name = "smi"
#	addr = 0
#}

#Section for ipmi plugin based on OpenIPMI:

#handler libipmi {
#       entity_root = "{SYSTEM_CHASSIS,3}"
#	name = "lan"
#	addr = "x.x.x.x" 	#ipaddress
#	port = 999
#	auth_type = "straight"
#	auth_level= "user"
#	username = "joe"
#	password = "blow"
#}

#Section for snmp_bc plugin:
#The root entry can be omitted in 'entity_root',
#but not the chassis entry.
handler libsnmp_bc {
        entity_root = "{SYSTEM_CHASSIS,1}" # Required
        host = "1.2.3.4" # Required
        community = "test" # Version 1 Required.
        version = "1" # Required. SNMP protocol version (1|3)
        security_name = "snmpv3_user" # Version 3 Required.
        passphrase = "opensesame" # Version 3. Required if security_level is authNoPriv or authPriv.
        auth_type = "MD5" # Version 3. Passphrase encoding (MD5|SHA)
        security_level = "noAuthNoPriv" # Version 3. (noAuthNoPriv|authNoPriv|authPriv)
}

#Section for static dummy plugin:
#If openhpi configured with
#configure --enable-dummy=static
#the dummy plugin is compiled in.
#It is possible to use dummy and libdummy
#at the same time.
#handler dummy {
#        entity_root = "{SYSTEM_CHASSIS,5}"
#        name = "test"
#        addr = 2
#}

#section for ipmidirect plugin using SMI -- local interface
#handler libipmidirect {
#       entity_root = "{SYSTEM_CHASSIS,6}"
#	name = "smi"
#	addr = 0
#}

#Section for ipmidirect plugin using RMCP:
#handler libipmidirect {
#        entity_root = "{SYSTEM_CHASSIS,7}"
#        name = "lan"       # RMCP
#        addr = "localhost" # ipaddress
#        port = "623"      # RMCP port
#        auth_type = "none" # none, md2, md5 or straight
#	 auth_level = "admin" # none, callback, user, operator or admin
#	 username = "arthur"
#        password = "pieman"
#        logflags = ""      # logging off
#        # logflags = "file stdout"
#        # infos goes to logfile and stdout
#        # the logfile are log00.log, log01.log ...
#        # if #logfile_max reached replace the oldest one
#        logfile = "log"
#        logfile_max = 10
#}
